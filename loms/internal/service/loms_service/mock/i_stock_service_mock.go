// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i gitlab.ozon.dev/1mikle1/homework/loms/internal/service/loms_service.IStockService -o i_stock_service_mock_test.go -n IStockServiceMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/1mikle1/homework/loms/internal/model"
)

// IStockServiceMock implements mm_loms_service.IStockService
type IStockServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetStockBySKU          func(ctx context.Context, s1 model.SKU) (s2 model.Stock, err error)
	funcGetStockBySKUOrigin    string
	inspectFuncGetStockBySKU   func(ctx context.Context, s1 model.SKU)
	afterGetStockBySKUCounter  uint64
	beforeGetStockBySKUCounter uint64
	GetStockBySKUMock          mIStockServiceMockGetStockBySKU

	funcReserve          func(ctx context.Context, ia1 []model.Item) (err error)
	funcReserveOrigin    string
	inspectFuncReserve   func(ctx context.Context, ia1 []model.Item)
	afterReserveCounter  uint64
	beforeReserveCounter uint64
	ReserveMock          mIStockServiceMockReserve

	funcReserveCancel          func(ctx context.Context, ia1 []model.Item) (err error)
	funcReserveCancelOrigin    string
	inspectFuncReserveCancel   func(ctx context.Context, ia1 []model.Item)
	afterReserveCancelCounter  uint64
	beforeReserveCancelCounter uint64
	ReserveCancelMock          mIStockServiceMockReserveCancel

	funcReserveRemove          func(ctx context.Context, ia1 []model.Item) (err error)
	funcReserveRemoveOrigin    string
	inspectFuncReserveRemove   func(ctx context.Context, ia1 []model.Item)
	afterReserveRemoveCounter  uint64
	beforeReserveRemoveCounter uint64
	ReserveRemoveMock          mIStockServiceMockReserveRemove
}

// NewIStockServiceMock returns a mock for mm_loms_service.IStockService
func NewIStockServiceMock(t minimock.Tester) *IStockServiceMock {
	m := &IStockServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetStockBySKUMock = mIStockServiceMockGetStockBySKU{mock: m}
	m.GetStockBySKUMock.callArgs = []*IStockServiceMockGetStockBySKUParams{}

	m.ReserveMock = mIStockServiceMockReserve{mock: m}
	m.ReserveMock.callArgs = []*IStockServiceMockReserveParams{}

	m.ReserveCancelMock = mIStockServiceMockReserveCancel{mock: m}
	m.ReserveCancelMock.callArgs = []*IStockServiceMockReserveCancelParams{}

	m.ReserveRemoveMock = mIStockServiceMockReserveRemove{mock: m}
	m.ReserveRemoveMock.callArgs = []*IStockServiceMockReserveRemoveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIStockServiceMockGetStockBySKU struct {
	optional           bool
	mock               *IStockServiceMock
	defaultExpectation *IStockServiceMockGetStockBySKUExpectation
	expectations       []*IStockServiceMockGetStockBySKUExpectation

	callArgs []*IStockServiceMockGetStockBySKUParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IStockServiceMockGetStockBySKUExpectation specifies expectation struct of the IStockService.GetStockBySKU
type IStockServiceMockGetStockBySKUExpectation struct {
	mock               *IStockServiceMock
	params             *IStockServiceMockGetStockBySKUParams
	paramPtrs          *IStockServiceMockGetStockBySKUParamPtrs
	expectationOrigins IStockServiceMockGetStockBySKUExpectationOrigins
	results            *IStockServiceMockGetStockBySKUResults
	returnOrigin       string
	Counter            uint64
}

// IStockServiceMockGetStockBySKUParams contains parameters of the IStockService.GetStockBySKU
type IStockServiceMockGetStockBySKUParams struct {
	ctx context.Context
	s1  model.SKU
}

// IStockServiceMockGetStockBySKUParamPtrs contains pointers to parameters of the IStockService.GetStockBySKU
type IStockServiceMockGetStockBySKUParamPtrs struct {
	ctx *context.Context
	s1  *model.SKU
}

// IStockServiceMockGetStockBySKUResults contains results of the IStockService.GetStockBySKU
type IStockServiceMockGetStockBySKUResults struct {
	s2  model.Stock
	err error
}

// IStockServiceMockGetStockBySKUOrigins contains origins of expectations of the IStockService.GetStockBySKU
type IStockServiceMockGetStockBySKUExpectationOrigins struct {
	origin    string
	originCtx string
	originS1  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) Optional() *mIStockServiceMockGetStockBySKU {
	mmGetStockBySKU.optional = true
	return mmGetStockBySKU
}

// Expect sets up expected params for IStockService.GetStockBySKU
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) Expect(ctx context.Context, s1 model.SKU) *mIStockServiceMockGetStockBySKU {
	if mmGetStockBySKU.mock.funcGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("IStockServiceMock.GetStockBySKU mock is already set by Set")
	}

	if mmGetStockBySKU.defaultExpectation == nil {
		mmGetStockBySKU.defaultExpectation = &IStockServiceMockGetStockBySKUExpectation{}
	}

	if mmGetStockBySKU.defaultExpectation.paramPtrs != nil {
		mmGetStockBySKU.mock.t.Fatalf("IStockServiceMock.GetStockBySKU mock is already set by ExpectParams functions")
	}

	mmGetStockBySKU.defaultExpectation.params = &IStockServiceMockGetStockBySKUParams{ctx, s1}
	mmGetStockBySKU.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetStockBySKU.expectations {
		if minimock.Equal(e.params, mmGetStockBySKU.defaultExpectation.params) {
			mmGetStockBySKU.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockBySKU.defaultExpectation.params)
		}
	}

	return mmGetStockBySKU
}

// ExpectCtxParam1 sets up expected param ctx for IStockService.GetStockBySKU
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) ExpectCtxParam1(ctx context.Context) *mIStockServiceMockGetStockBySKU {
	if mmGetStockBySKU.mock.funcGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("IStockServiceMock.GetStockBySKU mock is already set by Set")
	}

	if mmGetStockBySKU.defaultExpectation == nil {
		mmGetStockBySKU.defaultExpectation = &IStockServiceMockGetStockBySKUExpectation{}
	}

	if mmGetStockBySKU.defaultExpectation.params != nil {
		mmGetStockBySKU.mock.t.Fatalf("IStockServiceMock.GetStockBySKU mock is already set by Expect")
	}

	if mmGetStockBySKU.defaultExpectation.paramPtrs == nil {
		mmGetStockBySKU.defaultExpectation.paramPtrs = &IStockServiceMockGetStockBySKUParamPtrs{}
	}
	mmGetStockBySKU.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetStockBySKU.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetStockBySKU
}

// ExpectS1Param2 sets up expected param s1 for IStockService.GetStockBySKU
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) ExpectS1Param2(s1 model.SKU) *mIStockServiceMockGetStockBySKU {
	if mmGetStockBySKU.mock.funcGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("IStockServiceMock.GetStockBySKU mock is already set by Set")
	}

	if mmGetStockBySKU.defaultExpectation == nil {
		mmGetStockBySKU.defaultExpectation = &IStockServiceMockGetStockBySKUExpectation{}
	}

	if mmGetStockBySKU.defaultExpectation.params != nil {
		mmGetStockBySKU.mock.t.Fatalf("IStockServiceMock.GetStockBySKU mock is already set by Expect")
	}

	if mmGetStockBySKU.defaultExpectation.paramPtrs == nil {
		mmGetStockBySKU.defaultExpectation.paramPtrs = &IStockServiceMockGetStockBySKUParamPtrs{}
	}
	mmGetStockBySKU.defaultExpectation.paramPtrs.s1 = &s1
	mmGetStockBySKU.defaultExpectation.expectationOrigins.originS1 = minimock.CallerInfo(1)

	return mmGetStockBySKU
}

// Inspect accepts an inspector function that has same arguments as the IStockService.GetStockBySKU
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) Inspect(f func(ctx context.Context, s1 model.SKU)) *mIStockServiceMockGetStockBySKU {
	if mmGetStockBySKU.mock.inspectFuncGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("Inspect function is already set for IStockServiceMock.GetStockBySKU")
	}

	mmGetStockBySKU.mock.inspectFuncGetStockBySKU = f

	return mmGetStockBySKU
}

// Return sets up results that will be returned by IStockService.GetStockBySKU
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) Return(s2 model.Stock, err error) *IStockServiceMock {
	if mmGetStockBySKU.mock.funcGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("IStockServiceMock.GetStockBySKU mock is already set by Set")
	}

	if mmGetStockBySKU.defaultExpectation == nil {
		mmGetStockBySKU.defaultExpectation = &IStockServiceMockGetStockBySKUExpectation{mock: mmGetStockBySKU.mock}
	}
	mmGetStockBySKU.defaultExpectation.results = &IStockServiceMockGetStockBySKUResults{s2, err}
	mmGetStockBySKU.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetStockBySKU.mock
}

// Set uses given function f to mock the IStockService.GetStockBySKU method
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) Set(f func(ctx context.Context, s1 model.SKU) (s2 model.Stock, err error)) *IStockServiceMock {
	if mmGetStockBySKU.defaultExpectation != nil {
		mmGetStockBySKU.mock.t.Fatalf("Default expectation is already set for the IStockService.GetStockBySKU method")
	}

	if len(mmGetStockBySKU.expectations) > 0 {
		mmGetStockBySKU.mock.t.Fatalf("Some expectations are already set for the IStockService.GetStockBySKU method")
	}

	mmGetStockBySKU.mock.funcGetStockBySKU = f
	mmGetStockBySKU.mock.funcGetStockBySKUOrigin = minimock.CallerInfo(1)
	return mmGetStockBySKU.mock
}

// When sets expectation for the IStockService.GetStockBySKU which will trigger the result defined by the following
// Then helper
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) When(ctx context.Context, s1 model.SKU) *IStockServiceMockGetStockBySKUExpectation {
	if mmGetStockBySKU.mock.funcGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("IStockServiceMock.GetStockBySKU mock is already set by Set")
	}

	expectation := &IStockServiceMockGetStockBySKUExpectation{
		mock:               mmGetStockBySKU.mock,
		params:             &IStockServiceMockGetStockBySKUParams{ctx, s1},
		expectationOrigins: IStockServiceMockGetStockBySKUExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetStockBySKU.expectations = append(mmGetStockBySKU.expectations, expectation)
	return expectation
}

// Then sets up IStockService.GetStockBySKU return parameters for the expectation previously defined by the When method
func (e *IStockServiceMockGetStockBySKUExpectation) Then(s2 model.Stock, err error) *IStockServiceMock {
	e.results = &IStockServiceMockGetStockBySKUResults{s2, err}
	return e.mock
}

// Times sets number of times IStockService.GetStockBySKU should be invoked
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) Times(n uint64) *mIStockServiceMockGetStockBySKU {
	if n == 0 {
		mmGetStockBySKU.mock.t.Fatalf("Times of IStockServiceMock.GetStockBySKU mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetStockBySKU.expectedInvocations, n)
	mmGetStockBySKU.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetStockBySKU
}

func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) invocationsDone() bool {
	if len(mmGetStockBySKU.expectations) == 0 && mmGetStockBySKU.defaultExpectation == nil && mmGetStockBySKU.mock.funcGetStockBySKU == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetStockBySKU.mock.afterGetStockBySKUCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetStockBySKU.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetStockBySKU implements mm_loms_service.IStockService
func (mmGetStockBySKU *IStockServiceMock) GetStockBySKU(ctx context.Context, s1 model.SKU) (s2 model.Stock, err error) {
	mm_atomic.AddUint64(&mmGetStockBySKU.beforeGetStockBySKUCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockBySKU.afterGetStockBySKUCounter, 1)

	mmGetStockBySKU.t.Helper()

	if mmGetStockBySKU.inspectFuncGetStockBySKU != nil {
		mmGetStockBySKU.inspectFuncGetStockBySKU(ctx, s1)
	}

	mm_params := IStockServiceMockGetStockBySKUParams{ctx, s1}

	// Record call args
	mmGetStockBySKU.GetStockBySKUMock.mutex.Lock()
	mmGetStockBySKU.GetStockBySKUMock.callArgs = append(mmGetStockBySKU.GetStockBySKUMock.callArgs, &mm_params)
	mmGetStockBySKU.GetStockBySKUMock.mutex.Unlock()

	for _, e := range mmGetStockBySKU.GetStockBySKUMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s2, e.results.err
		}
	}

	if mmGetStockBySKU.GetStockBySKUMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.params
		mm_want_ptrs := mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.paramPtrs

		mm_got := IStockServiceMockGetStockBySKUParams{ctx, s1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetStockBySKU.t.Errorf("IStockServiceMock.GetStockBySKU got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.s1 != nil && !minimock.Equal(*mm_want_ptrs.s1, mm_got.s1) {
				mmGetStockBySKU.t.Errorf("IStockServiceMock.GetStockBySKU got unexpected parameter s1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.expectationOrigins.originS1, *mm_want_ptrs.s1, mm_got.s1, minimock.Diff(*mm_want_ptrs.s1, mm_got.s1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockBySKU.t.Errorf("IStockServiceMock.GetStockBySKU got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockBySKU.t.Fatal("No results are set for the IStockServiceMock.GetStockBySKU")
		}
		return (*mm_results).s2, (*mm_results).err
	}
	if mmGetStockBySKU.funcGetStockBySKU != nil {
		return mmGetStockBySKU.funcGetStockBySKU(ctx, s1)
	}
	mmGetStockBySKU.t.Fatalf("Unexpected call to IStockServiceMock.GetStockBySKU. %v %v", ctx, s1)
	return
}

// GetStockBySKUAfterCounter returns a count of finished IStockServiceMock.GetStockBySKU invocations
func (mmGetStockBySKU *IStockServiceMock) GetStockBySKUAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockBySKU.afterGetStockBySKUCounter)
}

// GetStockBySKUBeforeCounter returns a count of IStockServiceMock.GetStockBySKU invocations
func (mmGetStockBySKU *IStockServiceMock) GetStockBySKUBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockBySKU.beforeGetStockBySKUCounter)
}

// Calls returns a list of arguments used in each call to IStockServiceMock.GetStockBySKU.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockBySKU *mIStockServiceMockGetStockBySKU) Calls() []*IStockServiceMockGetStockBySKUParams {
	mmGetStockBySKU.mutex.RLock()

	argCopy := make([]*IStockServiceMockGetStockBySKUParams, len(mmGetStockBySKU.callArgs))
	copy(argCopy, mmGetStockBySKU.callArgs)

	mmGetStockBySKU.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockBySKUDone returns true if the count of the GetStockBySKU invocations corresponds
// the number of defined expectations
func (m *IStockServiceMock) MinimockGetStockBySKUDone() bool {
	if m.GetStockBySKUMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetStockBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetStockBySKUMock.invocationsDone()
}

// MinimockGetStockBySKUInspect logs each unmet expectation
func (m *IStockServiceMock) MinimockGetStockBySKUInspect() {
	for _, e := range m.GetStockBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IStockServiceMock.GetStockBySKU at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetStockBySKUCounter := mm_atomic.LoadUint64(&m.afterGetStockBySKUCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockBySKUMock.defaultExpectation != nil && afterGetStockBySKUCounter < 1 {
		if m.GetStockBySKUMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IStockServiceMock.GetStockBySKU at\n%s", m.GetStockBySKUMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IStockServiceMock.GetStockBySKU at\n%s with params: %#v", m.GetStockBySKUMock.defaultExpectation.expectationOrigins.origin, *m.GetStockBySKUMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockBySKU != nil && afterGetStockBySKUCounter < 1 {
		m.t.Errorf("Expected call to IStockServiceMock.GetStockBySKU at\n%s", m.funcGetStockBySKUOrigin)
	}

	if !m.GetStockBySKUMock.invocationsDone() && afterGetStockBySKUCounter > 0 {
		m.t.Errorf("Expected %d calls to IStockServiceMock.GetStockBySKU at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetStockBySKUMock.expectedInvocations), m.GetStockBySKUMock.expectedInvocationsOrigin, afterGetStockBySKUCounter)
	}
}

type mIStockServiceMockReserve struct {
	optional           bool
	mock               *IStockServiceMock
	defaultExpectation *IStockServiceMockReserveExpectation
	expectations       []*IStockServiceMockReserveExpectation

	callArgs []*IStockServiceMockReserveParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IStockServiceMockReserveExpectation specifies expectation struct of the IStockService.Reserve
type IStockServiceMockReserveExpectation struct {
	mock               *IStockServiceMock
	params             *IStockServiceMockReserveParams
	paramPtrs          *IStockServiceMockReserveParamPtrs
	expectationOrigins IStockServiceMockReserveExpectationOrigins
	results            *IStockServiceMockReserveResults
	returnOrigin       string
	Counter            uint64
}

// IStockServiceMockReserveParams contains parameters of the IStockService.Reserve
type IStockServiceMockReserveParams struct {
	ctx context.Context
	ia1 []model.Item
}

// IStockServiceMockReserveParamPtrs contains pointers to parameters of the IStockService.Reserve
type IStockServiceMockReserveParamPtrs struct {
	ctx *context.Context
	ia1 *[]model.Item
}

// IStockServiceMockReserveResults contains results of the IStockService.Reserve
type IStockServiceMockReserveResults struct {
	err error
}

// IStockServiceMockReserveOrigins contains origins of expectations of the IStockService.Reserve
type IStockServiceMockReserveExpectationOrigins struct {
	origin    string
	originCtx string
	originIa1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserve *mIStockServiceMockReserve) Optional() *mIStockServiceMockReserve {
	mmReserve.optional = true
	return mmReserve
}

// Expect sets up expected params for IStockService.Reserve
func (mmReserve *mIStockServiceMockReserve) Expect(ctx context.Context, ia1 []model.Item) *mIStockServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("IStockServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &IStockServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.paramPtrs != nil {
		mmReserve.mock.t.Fatalf("IStockServiceMock.Reserve mock is already set by ExpectParams functions")
	}

	mmReserve.defaultExpectation.params = &IStockServiceMockReserveParams{ctx, ia1}
	mmReserve.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReserve.expectations {
		if minimock.Equal(e.params, mmReserve.defaultExpectation.params) {
			mmReserve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserve.defaultExpectation.params)
		}
	}

	return mmReserve
}

// ExpectCtxParam1 sets up expected param ctx for IStockService.Reserve
func (mmReserve *mIStockServiceMockReserve) ExpectCtxParam1(ctx context.Context) *mIStockServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("IStockServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &IStockServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("IStockServiceMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &IStockServiceMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.ctx = &ctx
	mmReserve.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReserve
}

// ExpectIa1Param2 sets up expected param ia1 for IStockService.Reserve
func (mmReserve *mIStockServiceMockReserve) ExpectIa1Param2(ia1 []model.Item) *mIStockServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("IStockServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &IStockServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("IStockServiceMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &IStockServiceMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.ia1 = &ia1
	mmReserve.defaultExpectation.expectationOrigins.originIa1 = minimock.CallerInfo(1)

	return mmReserve
}

// Inspect accepts an inspector function that has same arguments as the IStockService.Reserve
func (mmReserve *mIStockServiceMockReserve) Inspect(f func(ctx context.Context, ia1 []model.Item)) *mIStockServiceMockReserve {
	if mmReserve.mock.inspectFuncReserve != nil {
		mmReserve.mock.t.Fatalf("Inspect function is already set for IStockServiceMock.Reserve")
	}

	mmReserve.mock.inspectFuncReserve = f

	return mmReserve
}

// Return sets up results that will be returned by IStockService.Reserve
func (mmReserve *mIStockServiceMockReserve) Return(err error) *IStockServiceMock {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("IStockServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &IStockServiceMockReserveExpectation{mock: mmReserve.mock}
	}
	mmReserve.defaultExpectation.results = &IStockServiceMockReserveResults{err}
	mmReserve.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReserve.mock
}

// Set uses given function f to mock the IStockService.Reserve method
func (mmReserve *mIStockServiceMockReserve) Set(f func(ctx context.Context, ia1 []model.Item) (err error)) *IStockServiceMock {
	if mmReserve.defaultExpectation != nil {
		mmReserve.mock.t.Fatalf("Default expectation is already set for the IStockService.Reserve method")
	}

	if len(mmReserve.expectations) > 0 {
		mmReserve.mock.t.Fatalf("Some expectations are already set for the IStockService.Reserve method")
	}

	mmReserve.mock.funcReserve = f
	mmReserve.mock.funcReserveOrigin = minimock.CallerInfo(1)
	return mmReserve.mock
}

// When sets expectation for the IStockService.Reserve which will trigger the result defined by the following
// Then helper
func (mmReserve *mIStockServiceMockReserve) When(ctx context.Context, ia1 []model.Item) *IStockServiceMockReserveExpectation {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("IStockServiceMock.Reserve mock is already set by Set")
	}

	expectation := &IStockServiceMockReserveExpectation{
		mock:               mmReserve.mock,
		params:             &IStockServiceMockReserveParams{ctx, ia1},
		expectationOrigins: IStockServiceMockReserveExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReserve.expectations = append(mmReserve.expectations, expectation)
	return expectation
}

// Then sets up IStockService.Reserve return parameters for the expectation previously defined by the When method
func (e *IStockServiceMockReserveExpectation) Then(err error) *IStockServiceMock {
	e.results = &IStockServiceMockReserveResults{err}
	return e.mock
}

// Times sets number of times IStockService.Reserve should be invoked
func (mmReserve *mIStockServiceMockReserve) Times(n uint64) *mIStockServiceMockReserve {
	if n == 0 {
		mmReserve.mock.t.Fatalf("Times of IStockServiceMock.Reserve mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserve.expectedInvocations, n)
	mmReserve.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReserve
}

func (mmReserve *mIStockServiceMockReserve) invocationsDone() bool {
	if len(mmReserve.expectations) == 0 && mmReserve.defaultExpectation == nil && mmReserve.mock.funcReserve == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserve.mock.afterReserveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserve.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Reserve implements mm_loms_service.IStockService
func (mmReserve *IStockServiceMock) Reserve(ctx context.Context, ia1 []model.Item) (err error) {
	mm_atomic.AddUint64(&mmReserve.beforeReserveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserve.afterReserveCounter, 1)

	mmReserve.t.Helper()

	if mmReserve.inspectFuncReserve != nil {
		mmReserve.inspectFuncReserve(ctx, ia1)
	}

	mm_params := IStockServiceMockReserveParams{ctx, ia1}

	// Record call args
	mmReserve.ReserveMock.mutex.Lock()
	mmReserve.ReserveMock.callArgs = append(mmReserve.ReserveMock.callArgs, &mm_params)
	mmReserve.ReserveMock.mutex.Unlock()

	for _, e := range mmReserve.ReserveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserve.ReserveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserve.ReserveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserve.ReserveMock.defaultExpectation.params
		mm_want_ptrs := mmReserve.ReserveMock.defaultExpectation.paramPtrs

		mm_got := IStockServiceMockReserveParams{ctx, ia1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserve.t.Errorf("IStockServiceMock.Reserve got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReserve.ReserveMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ia1 != nil && !minimock.Equal(*mm_want_ptrs.ia1, mm_got.ia1) {
				mmReserve.t.Errorf("IStockServiceMock.Reserve got unexpected parameter ia1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReserve.ReserveMock.defaultExpectation.expectationOrigins.originIa1, *mm_want_ptrs.ia1, mm_got.ia1, minimock.Diff(*mm_want_ptrs.ia1, mm_got.ia1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserve.t.Errorf("IStockServiceMock.Reserve got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReserve.ReserveMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserve.ReserveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserve.t.Fatal("No results are set for the IStockServiceMock.Reserve")
		}
		return (*mm_results).err
	}
	if mmReserve.funcReserve != nil {
		return mmReserve.funcReserve(ctx, ia1)
	}
	mmReserve.t.Fatalf("Unexpected call to IStockServiceMock.Reserve. %v %v", ctx, ia1)
	return
}

// ReserveAfterCounter returns a count of finished IStockServiceMock.Reserve invocations
func (mmReserve *IStockServiceMock) ReserveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.afterReserveCounter)
}

// ReserveBeforeCounter returns a count of IStockServiceMock.Reserve invocations
func (mmReserve *IStockServiceMock) ReserveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.beforeReserveCounter)
}

// Calls returns a list of arguments used in each call to IStockServiceMock.Reserve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserve *mIStockServiceMockReserve) Calls() []*IStockServiceMockReserveParams {
	mmReserve.mutex.RLock()

	argCopy := make([]*IStockServiceMockReserveParams, len(mmReserve.callArgs))
	copy(argCopy, mmReserve.callArgs)

	mmReserve.mutex.RUnlock()

	return argCopy
}

// MinimockReserveDone returns true if the count of the Reserve invocations corresponds
// the number of defined expectations
func (m *IStockServiceMock) MinimockReserveDone() bool {
	if m.ReserveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveMock.invocationsDone()
}

// MinimockReserveInspect logs each unmet expectation
func (m *IStockServiceMock) MinimockReserveInspect() {
	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IStockServiceMock.Reserve at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReserveCounter := mm_atomic.LoadUint64(&m.afterReserveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveMock.defaultExpectation != nil && afterReserveCounter < 1 {
		if m.ReserveMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IStockServiceMock.Reserve at\n%s", m.ReserveMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IStockServiceMock.Reserve at\n%s with params: %#v", m.ReserveMock.defaultExpectation.expectationOrigins.origin, *m.ReserveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserve != nil && afterReserveCounter < 1 {
		m.t.Errorf("Expected call to IStockServiceMock.Reserve at\n%s", m.funcReserveOrigin)
	}

	if !m.ReserveMock.invocationsDone() && afterReserveCounter > 0 {
		m.t.Errorf("Expected %d calls to IStockServiceMock.Reserve at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveMock.expectedInvocations), m.ReserveMock.expectedInvocationsOrigin, afterReserveCounter)
	}
}

type mIStockServiceMockReserveCancel struct {
	optional           bool
	mock               *IStockServiceMock
	defaultExpectation *IStockServiceMockReserveCancelExpectation
	expectations       []*IStockServiceMockReserveCancelExpectation

	callArgs []*IStockServiceMockReserveCancelParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IStockServiceMockReserveCancelExpectation specifies expectation struct of the IStockService.ReserveCancel
type IStockServiceMockReserveCancelExpectation struct {
	mock               *IStockServiceMock
	params             *IStockServiceMockReserveCancelParams
	paramPtrs          *IStockServiceMockReserveCancelParamPtrs
	expectationOrigins IStockServiceMockReserveCancelExpectationOrigins
	results            *IStockServiceMockReserveCancelResults
	returnOrigin       string
	Counter            uint64
}

// IStockServiceMockReserveCancelParams contains parameters of the IStockService.ReserveCancel
type IStockServiceMockReserveCancelParams struct {
	ctx context.Context
	ia1 []model.Item
}

// IStockServiceMockReserveCancelParamPtrs contains pointers to parameters of the IStockService.ReserveCancel
type IStockServiceMockReserveCancelParamPtrs struct {
	ctx *context.Context
	ia1 *[]model.Item
}

// IStockServiceMockReserveCancelResults contains results of the IStockService.ReserveCancel
type IStockServiceMockReserveCancelResults struct {
	err error
}

// IStockServiceMockReserveCancelOrigins contains origins of expectations of the IStockService.ReserveCancel
type IStockServiceMockReserveCancelExpectationOrigins struct {
	origin    string
	originCtx string
	originIa1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveCancel *mIStockServiceMockReserveCancel) Optional() *mIStockServiceMockReserveCancel {
	mmReserveCancel.optional = true
	return mmReserveCancel
}

// Expect sets up expected params for IStockService.ReserveCancel
func (mmReserveCancel *mIStockServiceMockReserveCancel) Expect(ctx context.Context, ia1 []model.Item) *mIStockServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("IStockServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &IStockServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.paramPtrs != nil {
		mmReserveCancel.mock.t.Fatalf("IStockServiceMock.ReserveCancel mock is already set by ExpectParams functions")
	}

	mmReserveCancel.defaultExpectation.params = &IStockServiceMockReserveCancelParams{ctx, ia1}
	mmReserveCancel.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReserveCancel.expectations {
		if minimock.Equal(e.params, mmReserveCancel.defaultExpectation.params) {
			mmReserveCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveCancel.defaultExpectation.params)
		}
	}

	return mmReserveCancel
}

// ExpectCtxParam1 sets up expected param ctx for IStockService.ReserveCancel
func (mmReserveCancel *mIStockServiceMockReserveCancel) ExpectCtxParam1(ctx context.Context) *mIStockServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("IStockServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &IStockServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.params != nil {
		mmReserveCancel.mock.t.Fatalf("IStockServiceMock.ReserveCancel mock is already set by Expect")
	}

	if mmReserveCancel.defaultExpectation.paramPtrs == nil {
		mmReserveCancel.defaultExpectation.paramPtrs = &IStockServiceMockReserveCancelParamPtrs{}
	}
	mmReserveCancel.defaultExpectation.paramPtrs.ctx = &ctx
	mmReserveCancel.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReserveCancel
}

// ExpectIa1Param2 sets up expected param ia1 for IStockService.ReserveCancel
func (mmReserveCancel *mIStockServiceMockReserveCancel) ExpectIa1Param2(ia1 []model.Item) *mIStockServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("IStockServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &IStockServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.params != nil {
		mmReserveCancel.mock.t.Fatalf("IStockServiceMock.ReserveCancel mock is already set by Expect")
	}

	if mmReserveCancel.defaultExpectation.paramPtrs == nil {
		mmReserveCancel.defaultExpectation.paramPtrs = &IStockServiceMockReserveCancelParamPtrs{}
	}
	mmReserveCancel.defaultExpectation.paramPtrs.ia1 = &ia1
	mmReserveCancel.defaultExpectation.expectationOrigins.originIa1 = minimock.CallerInfo(1)

	return mmReserveCancel
}

// Inspect accepts an inspector function that has same arguments as the IStockService.ReserveCancel
func (mmReserveCancel *mIStockServiceMockReserveCancel) Inspect(f func(ctx context.Context, ia1 []model.Item)) *mIStockServiceMockReserveCancel {
	if mmReserveCancel.mock.inspectFuncReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("Inspect function is already set for IStockServiceMock.ReserveCancel")
	}

	mmReserveCancel.mock.inspectFuncReserveCancel = f

	return mmReserveCancel
}

// Return sets up results that will be returned by IStockService.ReserveCancel
func (mmReserveCancel *mIStockServiceMockReserveCancel) Return(err error) *IStockServiceMock {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("IStockServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &IStockServiceMockReserveCancelExpectation{mock: mmReserveCancel.mock}
	}
	mmReserveCancel.defaultExpectation.results = &IStockServiceMockReserveCancelResults{err}
	mmReserveCancel.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReserveCancel.mock
}

// Set uses given function f to mock the IStockService.ReserveCancel method
func (mmReserveCancel *mIStockServiceMockReserveCancel) Set(f func(ctx context.Context, ia1 []model.Item) (err error)) *IStockServiceMock {
	if mmReserveCancel.defaultExpectation != nil {
		mmReserveCancel.mock.t.Fatalf("Default expectation is already set for the IStockService.ReserveCancel method")
	}

	if len(mmReserveCancel.expectations) > 0 {
		mmReserveCancel.mock.t.Fatalf("Some expectations are already set for the IStockService.ReserveCancel method")
	}

	mmReserveCancel.mock.funcReserveCancel = f
	mmReserveCancel.mock.funcReserveCancelOrigin = minimock.CallerInfo(1)
	return mmReserveCancel.mock
}

// When sets expectation for the IStockService.ReserveCancel which will trigger the result defined by the following
// Then helper
func (mmReserveCancel *mIStockServiceMockReserveCancel) When(ctx context.Context, ia1 []model.Item) *IStockServiceMockReserveCancelExpectation {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("IStockServiceMock.ReserveCancel mock is already set by Set")
	}

	expectation := &IStockServiceMockReserveCancelExpectation{
		mock:               mmReserveCancel.mock,
		params:             &IStockServiceMockReserveCancelParams{ctx, ia1},
		expectationOrigins: IStockServiceMockReserveCancelExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReserveCancel.expectations = append(mmReserveCancel.expectations, expectation)
	return expectation
}

// Then sets up IStockService.ReserveCancel return parameters for the expectation previously defined by the When method
func (e *IStockServiceMockReserveCancelExpectation) Then(err error) *IStockServiceMock {
	e.results = &IStockServiceMockReserveCancelResults{err}
	return e.mock
}

// Times sets number of times IStockService.ReserveCancel should be invoked
func (mmReserveCancel *mIStockServiceMockReserveCancel) Times(n uint64) *mIStockServiceMockReserveCancel {
	if n == 0 {
		mmReserveCancel.mock.t.Fatalf("Times of IStockServiceMock.ReserveCancel mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveCancel.expectedInvocations, n)
	mmReserveCancel.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReserveCancel
}

func (mmReserveCancel *mIStockServiceMockReserveCancel) invocationsDone() bool {
	if len(mmReserveCancel.expectations) == 0 && mmReserveCancel.defaultExpectation == nil && mmReserveCancel.mock.funcReserveCancel == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveCancel.mock.afterReserveCancelCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveCancel.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveCancel implements mm_loms_service.IStockService
func (mmReserveCancel *IStockServiceMock) ReserveCancel(ctx context.Context, ia1 []model.Item) (err error) {
	mm_atomic.AddUint64(&mmReserveCancel.beforeReserveCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveCancel.afterReserveCancelCounter, 1)

	mmReserveCancel.t.Helper()

	if mmReserveCancel.inspectFuncReserveCancel != nil {
		mmReserveCancel.inspectFuncReserveCancel(ctx, ia1)
	}

	mm_params := IStockServiceMockReserveCancelParams{ctx, ia1}

	// Record call args
	mmReserveCancel.ReserveCancelMock.mutex.Lock()
	mmReserveCancel.ReserveCancelMock.callArgs = append(mmReserveCancel.ReserveCancelMock.callArgs, &mm_params)
	mmReserveCancel.ReserveCancelMock.mutex.Unlock()

	for _, e := range mmReserveCancel.ReserveCancelMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveCancel.ReserveCancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveCancel.ReserveCancelMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveCancel.ReserveCancelMock.defaultExpectation.params
		mm_want_ptrs := mmReserveCancel.ReserveCancelMock.defaultExpectation.paramPtrs

		mm_got := IStockServiceMockReserveCancelParams{ctx, ia1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveCancel.t.Errorf("IStockServiceMock.ReserveCancel got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReserveCancel.ReserveCancelMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ia1 != nil && !minimock.Equal(*mm_want_ptrs.ia1, mm_got.ia1) {
				mmReserveCancel.t.Errorf("IStockServiceMock.ReserveCancel got unexpected parameter ia1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReserveCancel.ReserveCancelMock.defaultExpectation.expectationOrigins.originIa1, *mm_want_ptrs.ia1, mm_got.ia1, minimock.Diff(*mm_want_ptrs.ia1, mm_got.ia1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveCancel.t.Errorf("IStockServiceMock.ReserveCancel got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReserveCancel.ReserveCancelMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveCancel.ReserveCancelMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveCancel.t.Fatal("No results are set for the IStockServiceMock.ReserveCancel")
		}
		return (*mm_results).err
	}
	if mmReserveCancel.funcReserveCancel != nil {
		return mmReserveCancel.funcReserveCancel(ctx, ia1)
	}
	mmReserveCancel.t.Fatalf("Unexpected call to IStockServiceMock.ReserveCancel. %v %v", ctx, ia1)
	return
}

// ReserveCancelAfterCounter returns a count of finished IStockServiceMock.ReserveCancel invocations
func (mmReserveCancel *IStockServiceMock) ReserveCancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveCancel.afterReserveCancelCounter)
}

// ReserveCancelBeforeCounter returns a count of IStockServiceMock.ReserveCancel invocations
func (mmReserveCancel *IStockServiceMock) ReserveCancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveCancel.beforeReserveCancelCounter)
}

// Calls returns a list of arguments used in each call to IStockServiceMock.ReserveCancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveCancel *mIStockServiceMockReserveCancel) Calls() []*IStockServiceMockReserveCancelParams {
	mmReserveCancel.mutex.RLock()

	argCopy := make([]*IStockServiceMockReserveCancelParams, len(mmReserveCancel.callArgs))
	copy(argCopy, mmReserveCancel.callArgs)

	mmReserveCancel.mutex.RUnlock()

	return argCopy
}

// MinimockReserveCancelDone returns true if the count of the ReserveCancel invocations corresponds
// the number of defined expectations
func (m *IStockServiceMock) MinimockReserveCancelDone() bool {
	if m.ReserveCancelMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveCancelMock.invocationsDone()
}

// MinimockReserveCancelInspect logs each unmet expectation
func (m *IStockServiceMock) MinimockReserveCancelInspect() {
	for _, e := range m.ReserveCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IStockServiceMock.ReserveCancel at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReserveCancelCounter := mm_atomic.LoadUint64(&m.afterReserveCancelCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveCancelMock.defaultExpectation != nil && afterReserveCancelCounter < 1 {
		if m.ReserveCancelMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IStockServiceMock.ReserveCancel at\n%s", m.ReserveCancelMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IStockServiceMock.ReserveCancel at\n%s with params: %#v", m.ReserveCancelMock.defaultExpectation.expectationOrigins.origin, *m.ReserveCancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveCancel != nil && afterReserveCancelCounter < 1 {
		m.t.Errorf("Expected call to IStockServiceMock.ReserveCancel at\n%s", m.funcReserveCancelOrigin)
	}

	if !m.ReserveCancelMock.invocationsDone() && afterReserveCancelCounter > 0 {
		m.t.Errorf("Expected %d calls to IStockServiceMock.ReserveCancel at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveCancelMock.expectedInvocations), m.ReserveCancelMock.expectedInvocationsOrigin, afterReserveCancelCounter)
	}
}

type mIStockServiceMockReserveRemove struct {
	optional           bool
	mock               *IStockServiceMock
	defaultExpectation *IStockServiceMockReserveRemoveExpectation
	expectations       []*IStockServiceMockReserveRemoveExpectation

	callArgs []*IStockServiceMockReserveRemoveParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IStockServiceMockReserveRemoveExpectation specifies expectation struct of the IStockService.ReserveRemove
type IStockServiceMockReserveRemoveExpectation struct {
	mock               *IStockServiceMock
	params             *IStockServiceMockReserveRemoveParams
	paramPtrs          *IStockServiceMockReserveRemoveParamPtrs
	expectationOrigins IStockServiceMockReserveRemoveExpectationOrigins
	results            *IStockServiceMockReserveRemoveResults
	returnOrigin       string
	Counter            uint64
}

// IStockServiceMockReserveRemoveParams contains parameters of the IStockService.ReserveRemove
type IStockServiceMockReserveRemoveParams struct {
	ctx context.Context
	ia1 []model.Item
}

// IStockServiceMockReserveRemoveParamPtrs contains pointers to parameters of the IStockService.ReserveRemove
type IStockServiceMockReserveRemoveParamPtrs struct {
	ctx *context.Context
	ia1 *[]model.Item
}

// IStockServiceMockReserveRemoveResults contains results of the IStockService.ReserveRemove
type IStockServiceMockReserveRemoveResults struct {
	err error
}

// IStockServiceMockReserveRemoveOrigins contains origins of expectations of the IStockService.ReserveRemove
type IStockServiceMockReserveRemoveExpectationOrigins struct {
	origin    string
	originCtx string
	originIa1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveRemove *mIStockServiceMockReserveRemove) Optional() *mIStockServiceMockReserveRemove {
	mmReserveRemove.optional = true
	return mmReserveRemove
}

// Expect sets up expected params for IStockService.ReserveRemove
func (mmReserveRemove *mIStockServiceMockReserveRemove) Expect(ctx context.Context, ia1 []model.Item) *mIStockServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("IStockServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &IStockServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.paramPtrs != nil {
		mmReserveRemove.mock.t.Fatalf("IStockServiceMock.ReserveRemove mock is already set by ExpectParams functions")
	}

	mmReserveRemove.defaultExpectation.params = &IStockServiceMockReserveRemoveParams{ctx, ia1}
	mmReserveRemove.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReserveRemove.expectations {
		if minimock.Equal(e.params, mmReserveRemove.defaultExpectation.params) {
			mmReserveRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveRemove.defaultExpectation.params)
		}
	}

	return mmReserveRemove
}

// ExpectCtxParam1 sets up expected param ctx for IStockService.ReserveRemove
func (mmReserveRemove *mIStockServiceMockReserveRemove) ExpectCtxParam1(ctx context.Context) *mIStockServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("IStockServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &IStockServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("IStockServiceMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &IStockServiceMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.ctx = &ctx
	mmReserveRemove.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReserveRemove
}

// ExpectIa1Param2 sets up expected param ia1 for IStockService.ReserveRemove
func (mmReserveRemove *mIStockServiceMockReserveRemove) ExpectIa1Param2(ia1 []model.Item) *mIStockServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("IStockServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &IStockServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("IStockServiceMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &IStockServiceMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.ia1 = &ia1
	mmReserveRemove.defaultExpectation.expectationOrigins.originIa1 = minimock.CallerInfo(1)

	return mmReserveRemove
}

// Inspect accepts an inspector function that has same arguments as the IStockService.ReserveRemove
func (mmReserveRemove *mIStockServiceMockReserveRemove) Inspect(f func(ctx context.Context, ia1 []model.Item)) *mIStockServiceMockReserveRemove {
	if mmReserveRemove.mock.inspectFuncReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("Inspect function is already set for IStockServiceMock.ReserveRemove")
	}

	mmReserveRemove.mock.inspectFuncReserveRemove = f

	return mmReserveRemove
}

// Return sets up results that will be returned by IStockService.ReserveRemove
func (mmReserveRemove *mIStockServiceMockReserveRemove) Return(err error) *IStockServiceMock {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("IStockServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &IStockServiceMockReserveRemoveExpectation{mock: mmReserveRemove.mock}
	}
	mmReserveRemove.defaultExpectation.results = &IStockServiceMockReserveRemoveResults{err}
	mmReserveRemove.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReserveRemove.mock
}

// Set uses given function f to mock the IStockService.ReserveRemove method
func (mmReserveRemove *mIStockServiceMockReserveRemove) Set(f func(ctx context.Context, ia1 []model.Item) (err error)) *IStockServiceMock {
	if mmReserveRemove.defaultExpectation != nil {
		mmReserveRemove.mock.t.Fatalf("Default expectation is already set for the IStockService.ReserveRemove method")
	}

	if len(mmReserveRemove.expectations) > 0 {
		mmReserveRemove.mock.t.Fatalf("Some expectations are already set for the IStockService.ReserveRemove method")
	}

	mmReserveRemove.mock.funcReserveRemove = f
	mmReserveRemove.mock.funcReserveRemoveOrigin = minimock.CallerInfo(1)
	return mmReserveRemove.mock
}

// When sets expectation for the IStockService.ReserveRemove which will trigger the result defined by the following
// Then helper
func (mmReserveRemove *mIStockServiceMockReserveRemove) When(ctx context.Context, ia1 []model.Item) *IStockServiceMockReserveRemoveExpectation {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("IStockServiceMock.ReserveRemove mock is already set by Set")
	}

	expectation := &IStockServiceMockReserveRemoveExpectation{
		mock:               mmReserveRemove.mock,
		params:             &IStockServiceMockReserveRemoveParams{ctx, ia1},
		expectationOrigins: IStockServiceMockReserveRemoveExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReserveRemove.expectations = append(mmReserveRemove.expectations, expectation)
	return expectation
}

// Then sets up IStockService.ReserveRemove return parameters for the expectation previously defined by the When method
func (e *IStockServiceMockReserveRemoveExpectation) Then(err error) *IStockServiceMock {
	e.results = &IStockServiceMockReserveRemoveResults{err}
	return e.mock
}

// Times sets number of times IStockService.ReserveRemove should be invoked
func (mmReserveRemove *mIStockServiceMockReserveRemove) Times(n uint64) *mIStockServiceMockReserveRemove {
	if n == 0 {
		mmReserveRemove.mock.t.Fatalf("Times of IStockServiceMock.ReserveRemove mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveRemove.expectedInvocations, n)
	mmReserveRemove.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReserveRemove
}

func (mmReserveRemove *mIStockServiceMockReserveRemove) invocationsDone() bool {
	if len(mmReserveRemove.expectations) == 0 && mmReserveRemove.defaultExpectation == nil && mmReserveRemove.mock.funcReserveRemove == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveRemove.mock.afterReserveRemoveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveRemove.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveRemove implements mm_loms_service.IStockService
func (mmReserveRemove *IStockServiceMock) ReserveRemove(ctx context.Context, ia1 []model.Item) (err error) {
	mm_atomic.AddUint64(&mmReserveRemove.beforeReserveRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveRemove.afterReserveRemoveCounter, 1)

	mmReserveRemove.t.Helper()

	if mmReserveRemove.inspectFuncReserveRemove != nil {
		mmReserveRemove.inspectFuncReserveRemove(ctx, ia1)
	}

	mm_params := IStockServiceMockReserveRemoveParams{ctx, ia1}

	// Record call args
	mmReserveRemove.ReserveRemoveMock.mutex.Lock()
	mmReserveRemove.ReserveRemoveMock.callArgs = append(mmReserveRemove.ReserveRemoveMock.callArgs, &mm_params)
	mmReserveRemove.ReserveRemoveMock.mutex.Unlock()

	for _, e := range mmReserveRemove.ReserveRemoveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveRemove.ReserveRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveRemove.ReserveRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveRemove.ReserveRemoveMock.defaultExpectation.params
		mm_want_ptrs := mmReserveRemove.ReserveRemoveMock.defaultExpectation.paramPtrs

		mm_got := IStockServiceMockReserveRemoveParams{ctx, ia1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveRemove.t.Errorf("IStockServiceMock.ReserveRemove got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReserveRemove.ReserveRemoveMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ia1 != nil && !minimock.Equal(*mm_want_ptrs.ia1, mm_got.ia1) {
				mmReserveRemove.t.Errorf("IStockServiceMock.ReserveRemove got unexpected parameter ia1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReserveRemove.ReserveRemoveMock.defaultExpectation.expectationOrigins.originIa1, *mm_want_ptrs.ia1, mm_got.ia1, minimock.Diff(*mm_want_ptrs.ia1, mm_got.ia1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveRemove.t.Errorf("IStockServiceMock.ReserveRemove got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReserveRemove.ReserveRemoveMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveRemove.ReserveRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveRemove.t.Fatal("No results are set for the IStockServiceMock.ReserveRemove")
		}
		return (*mm_results).err
	}
	if mmReserveRemove.funcReserveRemove != nil {
		return mmReserveRemove.funcReserveRemove(ctx, ia1)
	}
	mmReserveRemove.t.Fatalf("Unexpected call to IStockServiceMock.ReserveRemove. %v %v", ctx, ia1)
	return
}

// ReserveRemoveAfterCounter returns a count of finished IStockServiceMock.ReserveRemove invocations
func (mmReserveRemove *IStockServiceMock) ReserveRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.afterReserveRemoveCounter)
}

// ReserveRemoveBeforeCounter returns a count of IStockServiceMock.ReserveRemove invocations
func (mmReserveRemove *IStockServiceMock) ReserveRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.beforeReserveRemoveCounter)
}

// Calls returns a list of arguments used in each call to IStockServiceMock.ReserveRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveRemove *mIStockServiceMockReserveRemove) Calls() []*IStockServiceMockReserveRemoveParams {
	mmReserveRemove.mutex.RLock()

	argCopy := make([]*IStockServiceMockReserveRemoveParams, len(mmReserveRemove.callArgs))
	copy(argCopy, mmReserveRemove.callArgs)

	mmReserveRemove.mutex.RUnlock()

	return argCopy
}

// MinimockReserveRemoveDone returns true if the count of the ReserveRemove invocations corresponds
// the number of defined expectations
func (m *IStockServiceMock) MinimockReserveRemoveDone() bool {
	if m.ReserveRemoveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveRemoveMock.invocationsDone()
}

// MinimockReserveRemoveInspect logs each unmet expectation
func (m *IStockServiceMock) MinimockReserveRemoveInspect() {
	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IStockServiceMock.ReserveRemove at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReserveRemoveCounter := mm_atomic.LoadUint64(&m.afterReserveRemoveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveRemoveMock.defaultExpectation != nil && afterReserveRemoveCounter < 1 {
		if m.ReserveRemoveMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IStockServiceMock.ReserveRemove at\n%s", m.ReserveRemoveMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IStockServiceMock.ReserveRemove at\n%s with params: %#v", m.ReserveRemoveMock.defaultExpectation.expectationOrigins.origin, *m.ReserveRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveRemove != nil && afterReserveRemoveCounter < 1 {
		m.t.Errorf("Expected call to IStockServiceMock.ReserveRemove at\n%s", m.funcReserveRemoveOrigin)
	}

	if !m.ReserveRemoveMock.invocationsDone() && afterReserveRemoveCounter > 0 {
		m.t.Errorf("Expected %d calls to IStockServiceMock.ReserveRemove at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveRemoveMock.expectedInvocations), m.ReserveRemoveMock.expectedInvocationsOrigin, afterReserveRemoveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IStockServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetStockBySKUInspect()

			m.MinimockReserveInspect()

			m.MinimockReserveCancelInspect()

			m.MinimockReserveRemoveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IStockServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IStockServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetStockBySKUDone() &&
		m.MinimockReserveDone() &&
		m.MinimockReserveCancelDone() &&
		m.MinimockReserveRemoveDone()
}
